{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweet","setNewTweet","className","onSubmit","event","preventDefault","newValue","current","value","currentTweetList","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","console","log","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","map","item","index","Tweet","tweet","key","ActionBtn","action","display","setLikes","userLike","setUserLike","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","rootEle","document","getElementById","ReactDOM","render","StrictMode","tweetmeEle","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.834afa08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup';\n\nexport function TweetsComponent(props) {\n\tconst textAreaRef = React.createRef();\n\tconst [newTweet, setNewTweet] = useState([]);\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst newValue = textAreaRef.current.value;\n\t\tlet currentTweetList = [...newTweet];\n\t\tcurrentTweetList.unshift({\n\t\t\tcontent: newValue,\n\t\t\tlikes: 0,\n\t\t\tid: 123,\n\t\t});\n\t\tsetNewTweet(currentTweetList);\n\t\ttextAreaRef.current.value = '';\n\t};\n\treturn <div className={props.className}><div className='col-md-12 mb-3'>\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t<textarea ref={textAreaRef} required={true} className='form-control'>\n\t\t\t</textarea>\n\t\t\t<button type={\"submit\"} className='btn btn-primary my-3'>Tweet</button>\n\t\t</form>\n\t\t</div>\n\t\t<TweetsList newTweet={newTweet}/>\n\t</div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([]);\n    const [tweets, setTweets] = useState([]);\n    useEffect(() => {\n    \tlet final = [...props.newTweet].concat(tweetsInit);\n    \tif (final.length !== tweets.length) {\n    \t\tsetTweets(final);\n\t    }\n    }, [props.newTweet, tweets.length, tweetsInit]);\n\n\tconst newTweet = props.newTweet;\n\tconsole.log(newTweet);\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setTweetsInit(response);\n            }\n        };\n        loadTweets(myCallback);\n    }, []);\n    return tweets.map((item,index)=>{\n                        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n                    });\n}\n\nexport function Tweet(props) {\n    const {tweet} = props;\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content} - {tweet.likes}</p>\n        <div>\n            <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Like\"}}/>\n            <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}}/>\n            <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/>\n        </div>\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props;\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false);\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\n    const display = action.type === 'like' ? `${likes} ${action.display}` : `${action.display}`;\n    const handleClick = () => {\n    \tif (action.type === 'like') {\n    \t\tif (userLike === true) {\n    \t\t    setLikes(likes - 1);\n    \t\t    setUserLike(false);\n\t        } else {\n\t\t\t    setLikes(likes + 1);\n\t\t\t    setUserLike(true);\n\t\t    }\n\t    }\n    };\n    return <button className={className} onClick={handleClick}> {display} </button>\n}","export function loadTweets(callback) {\n    const xhr = new XMLHttpRequest();\n    const method = \"GET\";\n    const url = \"http://localhost:8000/api/tweets/\";\n    xhr.responseType = \"json\";\n    xhr.open(method, url);\n    xhr.onload = function() {\n        callback(xhr.response, xhr.status);\n    };\n    xhr.onerror = function(e) {\n        console.log(e);\n        callback({\"content\": \"Request failed\"}, 400)\n    };\n    xhr.send();\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from \"./tweets\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <div>\n                   <TweetsComponent />\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from \"./tweets\";\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEle = document.getElementById('root');\nif (rootEle) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      rootEle\n    );\n}\n\nconst tweetmeEle = document.getElementById('tweetme');\nif (tweetmeEle) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <TweetsComponent />\n      </React.StrictMode>,\n      tweetmeEle\n    );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}